{{ 'reviewStyle.css' | asset_url | stylesheet_tag }}

<div class="shopify-product-reviews">
  <div class="columns">
    <div class="column">
      <h2>Customer reviews</h2>
      <div id="global-ratings">
        <!-- Ratings distribution will be dynamically inserted here -->
      </div>
      <h3>Review this product</h3>
      <p>Share your thoughts with other customers</p>
      <button type="button" class="js-modal-trigger" data-target="open-modal">Write a customer review</button>
    </div>
    <div class="column">
      <div id="reviews-list">
        <!-- Reviews will be dynamically inserted here -->
      </div>
    </div>
  </div>

  <div class="modal" id="open-modal">
    <div class="modal-content">
      <div class="box">
        <form id="review-form">
          <input type="hidden" id="product-id" value="{{ block.settings.product.id }}">
          <input type="hidden" id="shop-name" value="{{ shop.domain }}">
          <input type="hidden" id="product-title" value="{{ product.title }}">
          <div class="star-rating" data-rating="0">
            <span class="star clickable" data-rating="1">★</span>
            <span class="star clickable" data-rating="2">★</span>
            <span class="star clickable" data-rating="3">★</span>
            <span class="star clickable" data-rating="4">★</span>
            <span class="star clickable" data-rating="5">★</span>
            <input type="hidden" id="rating" name="rating" required>
          </div>
          <label for="comment">Comments:</label>
          <textarea id="comment" name="comment" required></textarea>
          <label for="firstName">First Name:</label>
          <input type="text" id="firstName" name="firstName" required>
          <label for="lastName">Last Name:</label>
          <input type="text" id="lastName" name="lastName">
          <label for="image">Image:</label>
          <input type="file" id="image" name="image" accept="image/*">
          <label for="video">Video:</label>
          <input type="file" id="video" name="video" accept="video/*">
          <button type="submit">Submit Review</button>
          <div id="loading" style="display:none;">Loading...</div>
        </form>
      </div>
    </div>
    <button class="modal-close is-large" aria-label="close">Close</button>
  </div>
</div>

<script
  type="module"
>
  import { isFeatureEnabled } from '{{ 'isFeatureEnabled.js' | asset_url }}';

  function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
  }

  document.addEventListener('DOMContentLoaded', async function () {
    const shopName = document.getElementById('shop-name').value;
    const productId = document.getElementById('product-id').value;
    const productTitle = document.getElementById('product-title').value;
    
    const starRating = document.querySelector('.star-rating');
    const stars = starRating.querySelectorAll('.star');
    const ratingInput = document.getElementById('rating');

    starRating.addEventListener('click', function(e) {
      if (e.target.classList.contains('star')) {
        const rating = e.target.getAttribute('data-rating');
        ratingInput.value = rating;
        starRating.setAttribute('data-rating', rating);
      }
    });

    starRating.addEventListener('mouseover', function(e) {
      if (e.target.classList.contains('star')) {
        const rating = e.target.getAttribute('data-rating');
        starRating.setAttribute('data-rating', rating);
      }
    });

    starRating.addEventListener('mouseout', function() {
      starRating.setAttribute('data-rating', ratingInput.value || '0');
    });

    const apiEndpoint = 'https://accounting-chief-donations-exception.trycloudflare.com';

    // Fetch settings
    const settingsResponse = await fetch(`${apiEndpoint}/api/settings?shopName=${shopName}`);
    const settings = await settingsResponse.json();

    //Fetch subscription plan
    const subscriptionPlanResponse = await fetch(`${apiEndpoint}/api/subscription-plan?shopName=${shopName}`);
    const subscriptionPlan = await subscriptionPlanResponse.json();

    const enableSentimentAnalysis = settings.enableSentimentAnalysis;
    const enableAutomatedResponses = settings.enableAutomatedResponses;
    const allowMedia = settings.allowMedia;

    let allReviews = []; // Store all reviews globally

    // Fetch global ratings
    const fetchRatings = async () => {
      const response = await fetch(`${apiEndpoint}/api/ratings?productId=${productId}&shopName=${shopName}`);
      const data = await response.json();
      const { totalReviews, ratingsDistribution } = data;
    
      if (totalReviews) {
        const globalRatings = document.getElementById('global-ratings');
        globalRatings.innerHTML = `
          <p>Total Reviews: ${totalReviews}</p>
          <button id="show-all-reviews" class="filter-button">Show All Reviews</button>
          <div class="ratings-distribution">
            ${ratingsDistribution.map((rating, index) => `
              <div class="rating-row" data-rating="${5 - index}">
                <span class="star-count">${5 - index} stars:</span>
                <div class="progress-bar-container">
                  <div class="progress-bar" data-percentage="${rating.percentage}"></div>
                </div>
                <span class="percentage">${rating.count} (${rating.percentage}%)</span>
              </div>
            `).join('')}
          </div>
        `;
    
        setTimeout(() => {
          document.querySelectorAll('.progress-bar').forEach(bar => {
            const percentage = bar.getAttribute('data-percentage');
            bar.style.width = `${percentage}%`;
          });
        }, 100);

        document.querySelectorAll('.rating-row').forEach(row => {
          row.addEventListener('click', () => {
            const rating = row.getAttribute('data-rating');
            filterReviews(rating);
          });
        });

        document.getElementById('show-all-reviews').addEventListener('click', () => {
          filterReviews('all');
        });
      }
    };

    const fetchReviews = async () => {
      const response = await fetch(`${apiEndpoint}/api/reviews?productId=${productId}&shopName=${shopName}`);
      allReviews = await response.json();
      displayReviews(allReviews);
    };

    const displayReviews = (reviews) => {
      const reviewsList = document.getElementById('reviews-list');
      reviewsList.innerHTML = '';
    
      if (reviews.length === 0) {
        reviewsList.innerHTML = '<p>No reviews found.</p>';
      } else {
        reviews.forEach((review) => {
          const reviewElement = document.createElement('div');
          reviewElement.className = 'review-box';
          reviewElement.innerHTML = createReviewHTML(review);
          reviewsList.appendChild(reviewElement);
        });
    
        document.querySelectorAll('.reply-button').forEach(button => {
          button.addEventListener('click', () => {
            const reviewId = button.getAttribute('data-review-id');
            const parentId = button.getAttribute('data-parent-id');
            const replyText = prompt('Enter your reply:');
            if (replyText) {
              submitReply(reviewId, replyText, parentId);
            }
          });
        });
      }
    };

    const createReviewHTML = (review) => {
      const reviewDate = new Date(review.createdAt).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      });

      const starRating = `
        <div class="star-rating" data-rating="${review.rating}">
          ${Array(5).fill().map((_, i) => `<span class="star" data-rating="${i + 1}">★</span>`).join('')}
        </div>
      `;

      let repliesHTML = '';
      if (review.replies && review.replies.length > 0) {
        repliesHTML = `
          <div class="replies">
            ${createRepliesHTML(review.replies)}
          </div>
        `;
      }

      return `
        <div class="review-header">
          <div class="avatar-container">
            <img src="https://via.placeholder.com/48" alt="Customer Avatar" class="avatar">
          </div>
          <div class="review-info">
            <p class="reviewer-name">${review.firstName} ${review.lastName || ''}</p>
            ${starRating}
            <p class="review-date"><span class="reviewer-name">Reviewed on </span>${reviewDate}</p>
          </div>
        </div>
        <div class="review-content">
          ${review.imageUrl ? `<img src="${review.imageUrl}" alt="Review Image" class="review-image" />` : ''}
          ${review.videoUrl ? `<video src="${review.videoUrl}" controls class="review-video"></video>` : ''}
          <p class="review-comment">${review.comment}</p>
          ${enableSentimentAnalysis && review.sentiment ? 
            `<span class="sentiment-badge ${review.sentiment.toLowerCase()}">${capitalizeFirstLetter(review.sentiment)}</span>` 
            : ''}
        </div>
        <button class="reply-button" data-review-id="${review.id}">Reply to Review</button>
        ${repliesHTML}
      `;
    };

    const createRepliesHTML = (replies, depth = 0) => {
      return replies.map(reply => {
        const replyDate = new Date(reply.createdAt).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        });

        let nestedRepliesHTML = '';
        if (reply.children && reply.children.length > 0) {
          nestedRepliesHTML = createRepliesHTML(reply.children, depth + 1);
        }

        return `
          <div class="reply" style="margin-left: ${depth * 20}px;">
            <p><strong>${reply.type} Reply:</strong></p>
            <p>${reply.content}</p>
            <p class="reply-date">Replied on ${replyDate}</p>
            <button class="reply-button" data-review-id="${reply.reviewId}" data-parent-id="${reply.id}">Reply</button>
            ${nestedRepliesHTML}
          </div>
        `;
      }).join('');
    };
    
    const filterReviews = (rating) => {
      const filteredReviews = rating === 'all' 
        ? allReviews 
        : allReviews.filter(review => review.rating === parseInt(rating));
      displayReviews(filteredReviews);
    
      document.querySelectorAll('.rating-row').forEach(row => {
        row.classList.remove('active-filter');
      });
      if (rating !== 'all') {
        document.querySelector(`.rating-row[data-rating="${rating}"]`).classList.add('active-filter');
      }
    };
    
    await fetchRatings();
    await fetchReviews();

    const submitReply = async (reviewId, content, parentId = null) => {
      const response = await fetch(`${apiEndpoint}/api/submit-reply`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          reviewId, 
          content, 
          parentId,
          type: 'CUSTOMER'
        }),
      });
      if (response.ok) {
        alert('Reply submitted successfully');
        await fetchReviews();
      } else {
        alert('Failed to submit reply');
      }
    };

    document.getElementById('review-form').addEventListener('submit', async function (event) {
      event.preventDefault();
      const loading = document.getElementById('loading');
      loading.style.display = 'block';

      const formData = new FormData(this);

      formData.append('productId', document.getElementById('product-id').value);
      formData.append('shopName', document.getElementById('shop-name').value);
      formData.append('productTitle', document.getElementById('product-title').value);

      if (!allowMedia || !isFeatureEnabled(subscriptionPlan, "Images or Video")) {
        formData.delete('image');
        formData.delete('video');
      }

      try {
        const response = await fetch(`${apiEndpoint}/api/reviews`, {
          method: 'POST',
          body: formData,
        });

        if (!response.ok) {
          throw new Error('Failed to submit review');
        }

        loading.style.display = 'none';
        document.getElementById('review-form').reset();
        document.getElementById('open-modal').classList.remove('is-active');
        await fetchReviews();
        await fetchRatings();
      } catch (error) {
        console.error('Error submitting review:', error);
        alert('Failed to submit review. Please try again.');
      } finally {
        loading.style.display = 'none';
      }
    });

    document.querySelectorAll('.js-modal-trigger').forEach((trigger) => {
      trigger.addEventListener('click', () => {
        const modal = document.getElementById(trigger.dataset.target);
        modal.classList.add('is-active');
      });
    });

    document.querySelectorAll('.modal-close').forEach((closeButton) => {
      closeButton.addEventListener('click', () => {
        document.getElementById('open-modal').classList.remove('is-active');
      });
    });

    if (!allowMedia || !isFeatureEnabled(subscriptionPlan, "Images or Video")) {
      document.querySelector('label[for="image"]').style.display = 'none';
      document.querySelector('#image').style.display = 'none';
      document.querySelector('label[for="video"]').style.display = 'none';
      document.querySelector('#video').style.display = 'none';
    }
  });
</script>

{% schema %}
{
  "name": "Product Reviews",
  "target": "section",
  "settings": [
    {
      "type": "product",
      "id": "product",
      "label": "Product",
      "autofill": true
    }
  ]
}
{% endschema %}
